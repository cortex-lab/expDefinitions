function filmWorld(t, events, params, visStim, inputs, outputs, audio)% varargin)  % previously in place of visStim etc

% For testing purposes only:
%Screen('Preference', 'SkipSyncTests', 1);
%Screen('Preference', 'WindowShieldingLevel', 0);
%net = sig.Net;
%events = sig.Registry();
%events.expStart = net.origin('expStart');
%events.newTrial = net.origin('newTrial');
%events.trialNum = net.origin('trialNum');

% Select a random movie from a movies directory each new trial:

% Get directory where movies are stored.
moviesDir =... 
  '\\zserver.cortexlab.net\Lab\Share\Tim\stimuli\merged_video';
% Create a struct of the movies.
moviesStruct = dir(fullfile(moviesDir, '*.mp4'));
% Get index of movie within `movie_struct` randomly every trial.
idxs = events.expStart.map(@(~) randperm(length(moviesStruct)));
movieIdx = idxs(events.trialNum+1);
% Get the full path for the current movie.
moviePath = movieIdx.map(@(~)... 
  fullfile(moviesStruct(movieIdx.Node.WorkingValue).folder,... 
           moviesStruct(movieIdx.Node.WorkingValue).name));

% Play movie: 

playbackRate = 5; % speed
loop = 0;  % if >=1, then video loops.
playingMovie = moviePath.map(@(x) playMovie(x, playbackRate, loop));

% Create endTrial and expStop conditions:

% End trial after a certain number of seconds.
events.endTrial = moviePath.then(1); %#ok<*NODEF>
% Stop the experiment when we've gone through all movies.
stop = events.trialNum+1 == length(moviesStruct);
events.expStop = stop.then(1);

% Define signals to log in `events`
events.idxs = idxs;
events.movieIdx = movieIdx;

  function [movieFinished] = playMovie(moviePath, playbackRate, loop)
    % Plays video
    % Arguments
    % loop: if >= 1, then loop, otherwise vidoe plays once.
    
    windowPtr = Screen('Windows');
    movie = Screen('OpenMovie', windowPtr, moviePath);
    
    if loop >= 1
      Screen('PlayMovie', movie, playbackRate, loop);
    else
      Screen('PlayMovie', movie, playbackRate);
    end
    
    while true % ~KbCheck or true
      
      % Wait for next movie frame, retrieve texture handle to it
      tex = Screen('GetMovieImage', windowPtr, movie);
      
      % Valid texture returned? A negative value means end of movie reached:
      if tex<=0
        % We're done, break out of loop:
        break;
      end
      
      % Draw the new texture immediately to screen:
      Screen('DrawTexture', windowPtr, tex);
      
      % Update display:
      Screen('Flip', windowPtr);
      % Release texture:
      Screen('Close', tex);
      
    end
    
    % close movie.
    Screen('CloseMovie', movie);
    movieFinished = true;
    
  end

end
